{
	"name": "DeltaCopyfromDB_using_ControlTableSolo",
	"properties": {
		"description": "Copy new or updated rows only from database using external control table",
		"activities": [
			{
				"name": "LookupLastWaterMark",
				"description": "Retrieve the last high-watermark value stored in external control table",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlSource",
						"sqlReaderQuery": {
							"value": "select WatermarkValue from @{pipeline().parameters.Control_Table_Name}",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlDatabaseExternal_ControlTable2",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "LookupCurrentWaterMark",
				"description": "Retrieve  the current maximum value in watermark column of source data store",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "LookupSourceWaterMarkColumn",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlSource",
						"sqlReaderQuery": {
							"value": "@concat('select MAX(',activity('LookupSourceWaterMarkColumn').output.firstRow.SourceWaterMarkColumn,') as NewWatermarkValue from ',activity('LookupSourceWaterMarkColumn').output.firstRow.SchemaTable)",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlDatabaseDataSource1",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "DeltaCopyfromDB",
				"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "LookupCurrentWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "LookupLastWaterMark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlSource",
						"sqlReaderQuery": {
							"value": "select * from @{activity('LookupSourceWaterMarkColumn').output.firstRow.SchemaTable} where @{activity('LookupSourceWaterMarkColumn').output.firstRow.SourceWaterMarkColumn} > '@{activity('LookupLastWaterMark').output.firstRow.WatermarkValue}' and @{activity('LookupSourceWaterMarkColumn').output.firstRow.SourceWaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"dataIntegrationUnits": 0
				},
				"inputs": [
					{
						"referenceName": "AzureSqlDatabaseDataSource1",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DataDestination2",
						"type": "DatasetReference",
						"parameters": {
							"Data_Destination_Container": {
								"value": "@{activity('LookupSourceWaterMarkColumn').output.firstRow.DestinationContainer}",
								"type": "Expression"
							},
							"Data_Destination_Directory": {
								"value": "@{activity('LookupSourceWaterMarkColumn').output.firstRow.DestinationDirectory}",
								"type": "Expression"
							},
							"Data_Destination_Filename": {
								"value": "@{activity('LookupSourceWaterMarkColumn').output.firstRow.SourceTableName}",
								"type": "Expression"
							},
							"Data_Destination_Timestamp": {
								"value": "@{activity('LookupSourceWaterMarkColumn').output.firstRow.Timestamp}",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "UpdateWaterMark",
				"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "DeltaCopyfromDB",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[spUpdateWatermark]",
					"storedProcedureParameters": {
						"LastModifyDate": {
							"value": {
								"value": "@activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue",
								"type": "Expression"
							},
							"type": "datetime"
						},
						"PartitionID": {
							"value": {
								"value": "@activity('LookupSourceWaterMarkColumn').output.firstRow.PartitionID",
								"type": "Expression"
							},
							"type": "Int64"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "DeltaLS",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "LookupSourceWaterMarkColumn",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select * , SourceSchemaName+'.'+ SourceTableName as SchemaTable, ProjectName+'/'+SubjectArea+'/'+SourceSystem+'/'+SourceDatabase+'/'+SourceSchemaName+'/'+SourceTableName as DestinationDirectory, GETDATE() as Timestamp from @{pipeline().parameters.Control_Table_Name} where PartitionID = 1",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlDatabaseDataSource1",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"Control_Table_Name": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2021-08-03T17:12:12Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}